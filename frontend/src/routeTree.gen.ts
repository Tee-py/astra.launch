/* prettier-ignore-start */

/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file is auto-generated by TanStack Router

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as DashboardImport } from './routes/dashboard'
import { Route as IndexImport } from './routes/index'
import { Route as DashboardSettingsImport } from './routes/dashboard.settings'
import { Route as DashboardValidatorsIndexImport } from './routes/dashboard.validators.index'
import { Route as DashboardValidatorsValidatorIdImport } from './routes/dashboard.validators.$validatorId'

// Create/Update Routes

const DashboardRoute = DashboardImport.update({
  path: '/dashboard',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const DashboardSettingsRoute = DashboardSettingsImport.update({
  path: '/settings',
  getParentRoute: () => DashboardRoute,
} as any)

const DashboardValidatorsIndexRoute = DashboardValidatorsIndexImport.update({
  path: '/validators/',
  getParentRoute: () => DashboardRoute,
} as any)

const DashboardValidatorsValidatorIdRoute =
  DashboardValidatorsValidatorIdImport.update({
    path: '/validators/$validatorId',
    getParentRoute: () => DashboardRoute,
  } as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/dashboard': {
      id: '/dashboard'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof DashboardImport
      parentRoute: typeof rootRoute
    }
    '/dashboard/settings': {
      id: '/dashboard/settings'
      path: '/settings'
      fullPath: '/dashboard/settings'
      preLoaderRoute: typeof DashboardSettingsImport
      parentRoute: typeof DashboardImport
    }
    '/dashboard/validators/$validatorId': {
      id: '/dashboard/validators/$validatorId'
      path: '/validators/$validatorId'
      fullPath: '/dashboard/validators/$validatorId'
      preLoaderRoute: typeof DashboardValidatorsValidatorIdImport
      parentRoute: typeof DashboardImport
    }
    '/dashboard/validators/': {
      id: '/dashboard/validators/'
      path: '/validators'
      fullPath: '/dashboard/validators'
      preLoaderRoute: typeof DashboardValidatorsIndexImport
      parentRoute: typeof DashboardImport
    }
  }
}

// Create and export the route tree

interface DashboardRouteChildren {
  DashboardSettingsRoute: typeof DashboardSettingsRoute
  DashboardValidatorsValidatorIdRoute: typeof DashboardValidatorsValidatorIdRoute
  DashboardValidatorsIndexRoute: typeof DashboardValidatorsIndexRoute
}

const DashboardRouteChildren: DashboardRouteChildren = {
  DashboardSettingsRoute: DashboardSettingsRoute,
  DashboardValidatorsValidatorIdRoute: DashboardValidatorsValidatorIdRoute,
  DashboardValidatorsIndexRoute: DashboardValidatorsIndexRoute,
}

const DashboardRouteWithChildren = DashboardRoute._addFileChildren(
  DashboardRouteChildren,
)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/dashboard': typeof DashboardRouteWithChildren
  '/dashboard/settings': typeof DashboardSettingsRoute
  '/dashboard/validators/$validatorId': typeof DashboardValidatorsValidatorIdRoute
  '/dashboard/validators': typeof DashboardValidatorsIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/dashboard': typeof DashboardRouteWithChildren
  '/dashboard/settings': typeof DashboardSettingsRoute
  '/dashboard/validators/$validatorId': typeof DashboardValidatorsValidatorIdRoute
  '/dashboard/validators': typeof DashboardValidatorsIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/dashboard': typeof DashboardRouteWithChildren
  '/dashboard/settings': typeof DashboardSettingsRoute
  '/dashboard/validators/$validatorId': typeof DashboardValidatorsValidatorIdRoute
  '/dashboard/validators/': typeof DashboardValidatorsIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/dashboard'
    | '/dashboard/settings'
    | '/dashboard/validators/$validatorId'
    | '/dashboard/validators'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/dashboard'
    | '/dashboard/settings'
    | '/dashboard/validators/$validatorId'
    | '/dashboard/validators'
  id:
    | '__root__'
    | '/'
    | '/dashboard'
    | '/dashboard/settings'
    | '/dashboard/validators/$validatorId'
    | '/dashboard/validators/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  DashboardRoute: typeof DashboardRouteWithChildren
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  DashboardRoute: DashboardRouteWithChildren,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* prettier-ignore-end */

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/dashboard"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/dashboard": {
      "filePath": "dashboard.tsx",
      "children": [
        "/dashboard/settings",
        "/dashboard/validators/$validatorId",
        "/dashboard/validators/"
      ]
    },
    "/dashboard/settings": {
      "filePath": "dashboard.settings.tsx",
      "parent": "/dashboard"
    },
    "/dashboard/validators/$validatorId": {
      "filePath": "dashboard.validators.$validatorId.tsx",
      "parent": "/dashboard"
    },
    "/dashboard/validators/": {
      "filePath": "dashboard.validators.index.tsx",
      "parent": "/dashboard"
    }
  }
}
ROUTE_MANIFEST_END */
